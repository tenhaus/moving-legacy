<?xml version="1.0" encoding="utf-8"?>

<mx:Panel width="100%" height="100%" xmlns:mx="http://www.macromedia.com/2003/mxml" title="New Estimate.  Total $0.00." load="initEstimate()" show="getCompany(true)">

<mx:Script>
<![CDATA[

import com.movers.VO.*;

[Event("SubmitEvent")]
var estimateVO:EstimateVO;
var company_id:Number;

public function initEstimate()
{
  estimateVO = new EstimateVO();
  company_id = 0;
}


public function saveEstimate()
{
  if( ! comments.isValid() )
  {
    mx.controls.Alert.show( "There are errors on the Comments page." );
    return;
  }
  if( !contact.isValid() )
  {
    mx.controls.Alert.show( "There are errors on the Contact page." );
    return;
  }
  
  estimateVO.contactVO = contact.getContactVO();
  estimateVO.jobVO     = contact.getJobVO();
  
  estimateVO.additional_contactVO = additional_contact.additional_contactVO;
  estimateVO.commentVO = comments.commentVO;
  estimateVO.local_summaryVO = summary.local_summaryVO;
  estimateVO.ld_summaryVO = summary.ld_summaryVO;
  estimateVO.summary_informationVO = summary.summary_informationVO;
  
  estimateVO.materialsVO = materials.materialsVO;
  estimateVO.inventoryVO = inventory.inventoryVO;
  estimateVO.jobVO._status = "Estimate";
  book_job.enabled = false;
  sessionUtil.test( estimateVO );						    
}

function getCompany( modal ) {
  //normal user
  if( _global.session._company_id != 657676 ) {
    company_id = _global.session._company_id;
    contact.setCompany( _global.session._company_id );
    return;
  }

  if( company_id != 0 ) {
    return;
  }
  
  var popup = mx.managers.PopUpManager.createPopUp( _root, com.movers.estimate.Company_Chooser, modal, {deferred: true} );
  
  var delegate = mx.utils.Delegate.create( this, setCompany );
  popup.addEventListener( "SubmitEvent", delegate );
  popup.centerPopUp();
}

function setCompany( event )
{
  company_id = Number(event.company_id);
  status = event.company;
  event.target.deletePopUp();  
  contact.setCompany( event.company_id );
}

public function runTest() {
  if( ! comments.isValid() )
  {
    mx.controls.Alert.show( "There are errors on the Comments page." );
    return;
  }
  if( !contact.isValid() )
  {
    mx.controls.Alert.show( "There are errors on the Contact page." );
    return;
  }
  
  estimateVO.contactVO = contact.getContactVO();
  estimateVO.jobVO     = contact.getJobVO();
      
  estimateVO.additional_contactVO = additional_contact.additional_contactVO;
  estimateVO.commentVO = comments.commentVO;
  estimateVO.local_summaryVO = summary.local_summaryVO;
  estimateVO.ld_summaryVO = summary.ld_summaryVO;
  estimateVO.summary_informationVO = summary.summary_informationVO;
  
  estimateVO.materialsVO = materials.materialsVO;
  estimateVO.inventoryVO = inventory.inventoryVO;
  estimateVO.jobVO._status = "Booked";
  sessionUtil.test( estimateVO );
}


public function submit_Result( result )
{
  book_job.enabled = true;
  mx.controls.Alert.show( String(result) );
  dispatchEvent( { type: "SubmitEvent" } );
  reset();
}

public function cancel()
{
  dispatchEvent( { type: "SubmitEvent" } );
  reset();
}

public function reset()
{
  title = "New Estimate.  Total $0.00.";
  status = "";
  company_id = 0;
  contact.reset();
  additional_contact.reset();
  summary.reset();
  inventory.reset();
  materials.reset();
  comments.reset();
  tabnav.selectedChild=contact;
  //getCompany( true );
}

public function initInventory()
{
  var delegate = mx.utils.Delegate.create( this, inventory_changed );
  inventory.addEventListener( "InventoryChanged", delegate );
}


public function initMaterials()
{
  var delegate = mx.utils.Delegate.create( this, materials_changed );
  materials.addEventListener( "MaterialsChanged", delegate );
}


public function initSummary()
{
  var delegate = mx.utils.Delegate.create( this, summary_changed );
  summary.addEventListener( "SummaryChanged", delegate );
}

public function summary_changed( event )
{
  var title:String = "New Estimate.  ";
  
  title += "Total " + formatVOCurrency(event.total) + "."
  
  this.title = title;
}

public function materials_changed( event )
{
  summary.setMaterials( event.price );
}

public function inventory_changed( event )
{
  summary.setWeight( event.weight );
  summary.setCuft( event.cuft );
}

function formatVOCurrency( text )
{
  var res:String = USDformatter.format( text );
  
  if( res != "" ) {
    return(res);
  }
  else
  {
    return( "$0.00" );
  }
}
			

]]>
</mx:Script>

  <mx:CurrencyFormatter id="USDformatter" precision="2" currencySymbol="$" decimalSeparatorFrom="."
	decimalSeparatorTo="." useNegativeSign="true" useThousandsSeparator="true" alignSymbol="left"/>
	
  <mx:RemoteObject id="sessionUtil" source="com.movers.session.Utility" 
        result="submit_Result(event.result);" fault="mx.controls.Alert.show( event.fault.faultstring, 'Error'); book_job.enabled=true ">
    <mx:method name="test" />
  </mx:RemoteObject>
  
  <mx:TabNavigator id="tabnav" width="100%" height="100%" >

    <Contact label="Contact" id="contact" xmlns="com.movers.estimate.*"  />

    <Additional_Contact label="Additional Contact" id="additional_contact" xmlns="com.movers.estimate.*"  />

    <Summary label="Summary" id="summary" xmlns="com.movers.estimate.*" creationComplete="initSummary();" />

    <Materials label="Materials" id="materials" xmlns="com.movers.estimate.*"  creationComplete="initMaterials();" />
 
    <Inventory label="Inventory" id="inventory" xmlns="com.movers.estimate.*"  creationComplete="initInventory();" />

    <Comments label="Comments" id="comments" xmlns="com.movers.estimate.*"  />
 
  </mx:TabNavigator>
  
  <mx:ControlBar horizontalAlign="right">
    <mx:Button label="Cancel" click="cancel();" />
    <mx:Spacer width="100%" />
    <mx:Button label="Save Estimate" click="saveEstimate();" />
    <mx:Button id="book_job" label="Book Job" click="runTest();" />
  </mx:ControlBar>

</mx:Panel>
