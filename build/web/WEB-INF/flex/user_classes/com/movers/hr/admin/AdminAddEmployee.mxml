<?xml version="1.0" encoding="utf-8"?>

<mx:Panel width="100%" height="100%" title="New Employee." horizontalAlign="right" xmlns:mx="http://www.macromedia.com/2003/mxml" creationPolicy="all" creationComplete="reset()">

<mx:Script>
<![CDATA[

  import mx.validators.*;
  import com.movers.VO.*;
  import com.movers.Utility;
  
  [Event("SubmitEvent")]
  
  public var employeeInformationVO:EmployeeInformationVO;
  
  
  public function cancel()
  {
    reset();
    dispatchEvent( { type: "SubmitEvent" } );
  }

  public function reset()
  {
    name.text = "";
    name.validationSucceeded();
    address_1.text = "";
    address_2.text = "";
    city.text = "";
    state.selectedIndex = 0;
    zip_code.text = "";
    home_phone.text = "";
    email.text = "";
    ssn.text = "";
    ext.text = "";
    employee_role.selectedIndex = 0;
    employee_role.text = "";
    employee_role.validationSucceeded();
    username.text = "";
    username.validationSucceeded();
    password.text = "";
    password.validationSucceeded();
    hourly_rate.text = "$0.00";
				
    
    employeeInformationVO = new EmployeeInformationVO();
  }

  public function addEmployee_Result( result )
  {
    if( result == "true" )
    {
      reset();
      dispatchEvent( { type: "SubmitEvent" } );
    }
    else {
      mx.controls.Alert.show( result ); 
    }
  }

  public function getCompany()
  {
    if( isValid() ) {
      var popup = mx.managers.PopUpManager.createPopUp( _root, com.movers.hr.admin.Company_Chooser, true, {deferred: true} );
      
      var delegate = mx.utils.Delegate.create( this, addNewEmployee );
      popup.addEventListener( "SubmitEvent", delegate );
      popup.centerPopUp();
    }
    else {
      mx.controls.Alert.show( "There are errors on the page." );
    }
  }

  public function addNewEmployee( event )
  {
    employeeInformationVO._employee_id   = -1;
    employeeInformationVO._company_id    = event.company_id;
    util_add_employee.addEmployee( employeeInformationVO );
    event.target.deletePopUp();
  }
  
  function formatCurrency( item )
  {
    var res:String = USDformatter.format( item.text );
    if( res != "" ) {
      item.text = res;
    }
    else
    {
      item.text = "$0.00";
    }
  }

  public static function stripPhoneFormatting( num:String ) : String
  {
    if( num == null )
    {
      return( "" );
    }
    var result:String = "";
    for( var i=0; i<num.length; i++ )
    {  
      for( var j=0; j<=9; j++ )
      {
        if( j == Number(num.charAt(i)) )
	{
	  result += num.charAt(i);
	}
      }
    }
    
    if( Number(result) )
    {
      return( result );      
    }
    else
    {
      return( "" );
    }
  }

  function formatPhone( item )
  {    
    var tmp:String = stripPhoneFormatting( item.text );
    item.text = phoneformatter.format( tmp );
  }
					    
  function formatNumber( item )
  {
    var res:String = numberFormatter.format( item.text );

    if( res != "" ) {
        item.text = res;
    }
    else
    {
      item.text = "";
    }
  }
  
  public function isValid() :Boolean
  {
    var empValid:Boolean = false;
    
    empValid = Validator.isStructureValid(this, 'emp_model' );

    return( empValid );
  }
									     
  
  function validateForm( validator, value )
  {
    Validator.isValid( this, 'emp_model.name' );
    Validator.isValid( this, 'emp_model.home_phone' );
    Validator.isValid( this, 'emp_model.email' );
    Validator.isValid( this, 'emp_model.username' );
    Validator.isValid( this, 'emp_model.password' );
    Validator.isValid( this, 'emp_model.role' );
  }
		   
    
]]>
</mx:Script>

<mx:Model id="emp_model">
  <name>{ name.text }</name>
  <address_1>{ address_1.text }</address_1>
  <address_2>{ address_2.text }</address_2>
  <city>{ city.text }</city>
  <state>{ state.selectedItem.data }</state>
  <zip>{ zip_code.text }</zip>
  <home_phone>{ home_phone.text }</home_phone>
  <email>{ email.text }</email>
  <ssn>{ ssn.text }</ssn>
  <ext>{ ext.text }</ext>
  <role>{ employee_role.selectedItem.data }</role>
  <username>{ username.text }</username>
  <password>{ password.text }</password>
  <rate>{ hourly_rate.text }</rate>
</mx:Model>

<mx:Binding source="emp_model.name" destination="employeeInformationVO._name" />
<mx:Binding source="emp_model.address_1" destination="employeeInformationVO._address_1" />
<mx:Binding source="emp_model.address_2" destination="employeeInformationVO._address_2" />
<mx:Binding source="emp_model.city" destination="employeeInformationVO._city" />
<mx:Binding source="emp_model.state" destination="employeeInformationVO._state" />
<mx:Binding source="emp_model.zip" destination="employeeInformationVO._zip" />
<mx:Binding source="emp_model.home_phone" destination="employeeInformationVO._home_phone" />
<mx:Binding source="emp_model.email" destination="employeeInformationVO._email" />
<mx:Binding source="emp_model.ssn" destination="employeeInformationVO._ssn" />
<mx:Binding source="emp_model.ext" destination="employeeInformationVO._ext" />
<mx:Binding source="emp_model.role" destination="employeeInformationVO._role" />
<mx:Binding source="emp_model.username" destination="employeeInformationVO._username" />
<mx:Binding source="emp_model.password" destination="employeeInformationVO._password" />
<mx:Binding source="Utility.stripFormatting(emp_model.rate)" destination="employeeInformationVO._hourly_rate" />


<mx:Model id="roles" source="roles.xml" />
<mx:Model id="states" source="states.xml" />

<mx:CurrencyFormatter id="USDformatter" precision="2" currencySymbol="$" decimalSeparatorFrom="."
	decimalSeparatorTo="." useNegativeSign="true" useThousandsSeparator="true" alignSymbol="left"/>

<mx:NumberFormatter id="numberFormatter" precision="0" useNegativeSign="false" useThousandsSeparator="false" />

<mx:PhoneFormatter id="phoneformatter" areaCodeFormat="(###)" formatString="(###)###-####" />

<mx:StringValidator required="true" field="emp_model.name" maxLength="100" tooLongError="Employee name can be no longer than 100 characters." />

<mx:StringValidator required="true" field="emp_model.username" maxLength="100" />
<mx:StringValidator required="true" field="emp_model.password" maxLength="100" />
<mx:StringValidator required="true" field="emp_model.role" maxLength="100" />

<mx:EmailValidator field="emp_model.email" required="false" />
<mx:PhoneNumberValidator field="emp_model.home_phone" required="false" />
<mx:Validator field="emp_model" validate="validateForm( event.validator, event.value );" listener="this" />

<mx:RemoteObject id="util_add_employee" source="com.movers.session.Utility"
	result="addEmployee_Result(event.result)" fault="mx.controls.Alert.show( event.fault.faultstring, 'Error')">
  <mx:method name="addEmployee" />
</mx:RemoteObject>

<mx:Spacer height="70" />

<mx:HBox backgroundColor="#F7F7F7" width="100%" horizontalAlign="center" verticalAlign="middle">
  
  <mx:Form>
    
    <mx:FormItem label="Name" required="true">
      <mx:TextInput id="name" width="180" />
    </mx:FormItem>
    <mx:FormItem label="Address">
      <mx:TextInput id="address_1" width="180" />
      <mx:TextInput id="address_2" width="180" />
    </mx:FormItem>
    <mx:FormItem label="City">
      <mx:TextInput id="city" width="180" />
    </mx:FormItem>
    <mx:FormItem label="State">
      <mx:ComboBox id="state" dataProvider="{ states.state }" />
    </mx:FormItem>
    <mx:FormItem label="Zip">
      <mx:TextInput id="zip_code" width="90" />
    </mx:FormItem>
    <mx:FormItem label="Home Phone">
      <mx:TextInput id="home_phone" width="180" />
    </mx:FormItem>
    <mx:FormItem label="">
      <mx:Label text="" />
    </mx:FormItem>
  </mx:Form>
  
  <mx:Form>
    
    <mx:FormItem label="Email">
      <mx:TextInput id="email" width="180" />
    </mx:FormItem>
    <mx:FormItem label="SSN">
      <mx:TextInput id="ssn" width="180" />
    </mx:FormItem>
    <mx:FormItem label="Hourly Rate">
      <mx:TextInput id="hourly_rate" width="90" focusOut="formatCurrency(hourly_rate)" text="$0.00" />
    </mx:FormItem>
    <mx:FormItem label="Extension">
      <mx:TextInput id="ext" width="90" focusOut="formatNumber(ext)" />
    </mx:FormItem>
    <mx:FormItem label="Username" required="true">
      <mx:TextInput id="username" />
    </mx:FormItem>
    <mx:FormItem label="Password" required="true">
      <mx:TextInput id="password" password="true" />
    </mx:FormItem>
    <mx:FormItem label="Role" required="true">
      <mx:ComboBox id="employee_role" dataProvider="{ roles.role }"/>
    </mx:FormItem>
  </mx:Form>
  
</mx:HBox>
	  
<mx:ControlBar horizontalAlign="right">
  <mx:Button label="Cancel" click="cancel()" />
  <mx:Spacer width="100%" />
  <mx:Button label="Submit" click="getCompany()" />
</mx:ControlBar>

</mx:Panel>
